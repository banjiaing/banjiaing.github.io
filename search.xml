<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript简介</title>
      <link href="/2020/04/19/Javascript/"/>
      <url>/2020/04/19/Javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>概念：一门客户端脚本语言，运行在客户端浏览器中，每一个浏览器都有<br>JavaScript的解析引擎<br>脚本语言：不需要编译，直接就可以被浏览器解析执行了<br>功能：可以增强用户和html页面的交互过程，可以控制html元素，让页面有一些动态<br>的效果，增强用户体验</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC的简单用法</title>
      <link href="/2020/04/19/JDBC/"/>
      <url>/2020/04/19/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>概念：Java Database Connectivity Java 数据库连接，Java语言操作数据库，<br>本质：官方（sun公司）定义的一套操作所有关系型数据库的规则（接口），各个数据库厂商去实现这套接口，提供数据库驱动jar包<br>，我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类</p><a id="more"></a><p>主要实现步骤：<br>1、导入驱动jar包（mysql-connector-java-5.1.37.bin.jar）<br>2、注册驱动<br>3、获取数据库连接对象 Connection<br>4、定义sql<br>5、获取执行sql语句的对象 Statement<br>6、执行sql，接受返回结果<br>7、处理结果<br>8、释放资源<br>实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class.forname(&quot;com.mysql.jdbc.Driver&quot;); &#x2F;&#x2F;注册驱动</span><br><span class="line">Connection conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;数据库名称&quot;,&quot;用户名&quot;,&quot;密码&quot;); &#x2F;&#x2F;获取数据库的连接</span><br><span class="line">String sql &#x3D; “sql语句&quot;; &#x2F;&#x2F;定义sql语句</span><br><span class="line">Statement stmt &#x3D; conn.creatStatement();&#x2F;&#x2F;获取执行sql的对象</span><br><span class="line">int conn &#x3D; stmt.executeUpdate(sql); &#x2F;&#x2F;执行sql语句，这里stmt后面的是更新语句相关的函数，还有其他的函数</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close(); &#x2F;&#x2F;释放资源</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vi编辑文本</title>
      <link href="/2020/04/19/Vi%E7%BC%96%E8%BE%91%E6%96%87%E6%9C%AC/"/>
      <url>/2020/04/19/Vi%E7%BC%96%E8%BE%91%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="Vi编辑器"><a href="#Vi编辑器" class="headerlink" title="Vi编辑器"></a>Vi编辑器</h2><p>Vi编辑器总共有三种模式：命令行模式，文本输入模式，末行模式<br>进入vi的命令<br><code>vi filename</code> 打开或新建文件，并将光标置于第一行首<br><code>vi +n filename</code> 打开文件，并将光标置于第n行首<br><code>vi + filename</code> 打开文件，并将光标置于最后一行首<br><code>vi +/pattern filename</code>打开文件，并将光标置于第一个与pattern匹配的串处<br><code>vi -r filename</code> 在上次正用vi编辑时发生系统崩溃，恢复filename<br><code>vi filename….filename</code> 打开多个文件，依次进行编辑</p><a id="more"></a><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>屏幕翻滚类命令<br><code>Ctrl+u</code>向文件首翻半屏<br><code>Ctrl+d</code>向文件尾翻半屏<br><code>Ctrl+f</code>向文件尾翻一屏<br><code>Ctrl＋b</code>向文件首翻一屏<br><code>nz</code>将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部<br>Vi编辑器的默认模式，可以在此模式下键入命令来进入其他的模式，其他模式下按<code>ESC</code>键就可以回到命令行模式<br>命令行插入命令：<br><code>i</code> 在光标前插入<br><code>I</code> 在当前行首<br><code>a</code> 在光标后<br><code>A</code> 在当前行尾<br><code>o</code> 在当前行下新开一行<br><code>O</code> 在当前行上新开一行<br><code>r</code> 替换当前字符<br><code>R</code> 替换当前及以后字符，直到按ESC为止<br>删除命令<br><code>ndw或ndW</code>删除光标处开始及其后的n-1个字<br><code>do</code>删至行首<br><code>d$</code>删至行尾<br><code>ndd</code>删除当前行及其后n-1行<br><code>x或X</code>删除一个字符，x删除光标后的，而X删除光标前的<br><code>Ctrl+u</code>删除输入方式下所输入的文本<br>搜索及替换命令<br><code>/pattern</code>从光标开始处向文件尾搜索pattern<br><code>?pattern</code>从光标开始处向文件首搜索pattern<br><code>n</code>在同一方向重复上一次搜索命令<br><code>N</code>在反方向上重复上一次搜索命令<br><code>：s/p1/p2/g</code>将当前行中所有p1均用p2替代<br><code>：n1,n2s/p1/p2/g</code>将第n1至n2行中所有p1均用p2替代<br><code>：g/p1/s//p2/g</code>将文件中所有p1均用p2替换<br>选项设置<br><code>all</code>列出所有选项设置情况<br><code>term</code>设置终端类型<br><code>ignorance</code>在搜索中忽略大小写<br><code>list</code>：显示制表位(Ctrl+I)和行尾标志（$)<br><code>number</code>显示行号<br><code>report</code>显示由面向行的命令修改过的数目<br><code>terse</code>显示简短的警告信息<br><code>warn</code>在转到别的文件时若没保存当前文件则显示NO write信息<br><code>nomagic</code>允许在搜索模式中，使用前面不带“\”的特殊字符<br><code>nowrapscan</code>禁止vi在搜索到达文件两端时，又从另一端开始<br><code>mesg</code>允许vi显示其他用户用write写到自己终端上的信息</p><h3 id="文本输入模式"><a href="#文本输入模式" class="headerlink" title="文本输入模式"></a>文本输入模式</h3><p>此模式下可以编辑本文内容</p><h3 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h3><p>在命令行模式下按<code>：</code>进入末行模式，输入命令时会在最后一行显示，输入完命令后会自动进入命令行模式<br><code>：w</code> 保存当前文件<br><code>:q</code> 退出vi<br><code>：q!</code> 退出vi但不保存文件<br><code>：x</code> 保存当前文件并退出</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/19/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ol><li>进入文件命令：<code>cd 文件名 //可以进入想要进入的文件</code> <code>cd.</code>代表的是当前的位置，<code>cd..</code>代表是的上一级目录</li><li>创建文件夹命令：<code>mkdir 文件夹名</code></li><li>删除文件夹命令：<code>rm -r 文件夹名</code>,删除目录，如果要强制删除的话就是<code>rm -rf 文件夹名</code></li><li>创建文件命令：<code>touch 文件名</code></li><li>删除文件命令：<code>rm 文件名</code></li><li>查看文件命令：<code>vi 文件名</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库中的约束</title>
      <link href="/2020/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E7%BA%A6%E6%9D%9F/"/>
      <url>/2020/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<p>概念：对表中的数据进行限定，保证数据的正确性，有效性和完整性</p><a id="more"></a><ol><li><p>主键约束：primary key</p><blockquote><p>含义：</p><ol><li>非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键就是表中记录的唯一标识<br>创建表时添加主键约束<br>CREATE TABLE 表名(<pre><code>id int primary key, -- 给id添加主键name varchar(10));</code></pre>删除主键<br>ALTER TABLE 表名 DROP PRIMARY KEY;<br>创建完表后添加主键<br>ALTER TALBE 表名 MODIFY 字段 数据类型 PRIMARY KEY;<br>自动增长：<br>概念：如果某一列是数值类型的，使用auto_increment可以完成值的自动增长<br>创建表时，添加主键约束，并且完成主键自动增长：<br>CREATE TABLE 表名(<pre><code>id int primary key auto_increment,name varchar(10));</code></pre>删除自动增长：<br>ALTER TABLE 表名 MODIFY 字段 数据类型；<br>添加自动增长：<br>ALTER TABLE 表名 MODIFY 字段 数据类型 AUTO_INCREMENT;</li></ol></blockquote></li><li><p>非空约束：not null,值不能为空</p><blockquote><p>创建表时添加非空约束<br>创建表之后添加非空约束：<br>ALTER TABLE 表名 字段 数据类型 not null;</p></blockquote></li><li><p>唯一约束：unique,值不能重复</p><blockquote><p>id int unique;<br>删除唯一约束：<br>ALTER TABLE 表名 DROP INDEX 字段;<br>创建表后添加唯一约束：<br>ALTER TABLE 表名 MODIFY 表名 数据类型 UNIQUE;</p></blockquote></li><li><p>外键约束：foreign key</p><blockquote><p>在创建表时，可以添加外键<br>create table 表名(<br> ……..<br> constraint 外键名称 foreign key 外键列名称 references 主表名称(主表列名称);<br>);<br>删除外键：<br>alter table 外键所在的表 drop foreign key 外键名称<br>创建表之后，创建外键：<br>alter table 表名 add constraint 外键名称 foreign key 外键列名称 references 主表名称(主表列名称);<br>级联操作<br>添加级联：<br>语法：alter table 表名 add constraint 外键名称 </p><pre><code>foreign key 外键列名称 references 主表名称(主表列名称) on update cascade on delete cascade;</code></pre><p>分类：<br>级联更新：on update cascade<br>级联删除：on delete cascade</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库中的查询操作</title>
      <link href="/2020/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/03/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="DQL（查询表中的数据）"><a href="#DQL（查询表中的数据）" class="headerlink" title="DQL（查询表中的数据）"></a>DQL（查询表中的数据）</h2><blockquote><p>语法：<br>SELECT 字段列表<br>FROM 表名<br>WHERE 条件<br>GROUP BY 分组字段<br>HAVING 分组之后的条件<br>ORDER BY 排序<br>LIMIT 分页限定</p></blockquote><a id="more"></a><ol><li>基础查询<blockquote><p>查询所有：<br>SELECT * FORM 表名;<br>多个字段的查询：<br>SELECT 字段1，字段2，…，字段n FROM 表名;<br>去除重复：<br>SELECT DISTINCT 字段列表 FROM 表名;<br>计算列：<br>一般可以使用一些四则运算来计算一些列的值（一般进行数值型运算）<br>IFNULL(表达式1，表达式2)<br>表达式1：那个字段判断是否为NULL<br>表达式2：如果该字段为NULL后的替换值</p><pre><code>起别名：</code></pre><p>as(也可以省略)</p></blockquote></li><li>条件查询：<blockquote><p>WHERE子句后跟条件<br>运算符： &gt;、&lt;、&lt;=、&gt;=、=、&lt;&gt;<br>BETWEEN…AND…<br>IN（集合）<br>LIKE(占位符)：_：单个任意字符，%：多个任意字符<br>IS NULL，AND或&amp;&amp;，OR或||，NOT或！|</p></blockquote></li><li>排序查询<blockquote><p>ORDER BY 子句<br>ORDER BY 排序字段 排序方式<br>默认升序：<br>ASC:升序<br>DESC:降序</p></blockquote></li></ol><p>4.聚合函数</p><blockquote><p>将一列数据作为一个整体，进行纵向的运算<br>count：计算个数<br>max：计算最大值<br>min：计算最小值<br>sum：计算和<br>avg：计算平均数<br>聚合函数的运算，排除NULL值<br>SELECT COUNT(NAME) FROM STUDENT;<br>5. 分组查询<br>GROUP BY 字段;<br>分组之后查询的字段：分组字段，聚合函数<br>6. 分页查询<br>LIMIT 开始的索引，每页查询的条数；<br>公式：开始的索引 = （当前的页码 - 1）* 每页显示的条数<br>分页操作是一个方言</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDL和DML</title>
      <link href="/2020/03/18/DDL%E5%92%8CDML/"/>
      <url>/2020/03/18/DDL%E5%92%8CDML/</url>
      
        <content type="html"><![CDATA[<h2 id="DDL（操作数据库和表）"><a href="#DDL（操作数据库和表）" class="headerlink" title="DDL（操作数据库和表）"></a>DDL（操作数据库和表）</h2><ol><li>操作数据库：CRUD </li></ol><ul><li>C（Create）：创建<blockquote><p>创建数据库：<br>CREATE DATABASE  数据库名称;<a id="more"></a><br>判断数据库存在再创建：<br>CREATE DATABASE IF NOT EXISTS 数据库名称;<br>创建一个数据库并设置字符集：<br>CREATE DATABASE 数据库名称 CHARACTER SET 字符集;<br>判断一个数据库存在并设置字符集：<br>CREATE DATABASE IF NOT EXISTS 数据库名称 CHARACTER SET 字符集;</p></blockquote></li><li>R（Retrieve）：查询<blockquote><p>查询所有数据库：<br>SHOW DATABASES;<br>查询某个数据库的创建语句：<br>SHOW CREATE DATABASE 数据库名称;</p></blockquote></li><li>U（Update）：修改<blockquote><p>修改数据库的字符集：<br>ALTER DATABASE 数据库名称 CHARACTER SET 字符集;</p></blockquote></li><li>D（Delete）：删除<blockquote><p>删除数据库：<br>DROP DATABASE 数据库名称;<br>判断数据库是否存在再删除：<br>DROP DATABASE IF EXISTS 数据库名称;</p></blockquote></li><li>使用数据库<blockquote><p>查询当前正在适用的数据库：<br>SHOW DATABASE();<br>使用数据库：<br>USE 数据库名称;</p></blockquote></li></ul><ol start="2"><li>操作表<ul><li>C（Create）：<blockquote><p>语法：<br>CREATE TABLE 表名(<br>列名1 数据类型1,<br>列名2 数据类型2,<br><strong>…</strong><br>列名n 数据类型n);<br>复制表：<br>CREATE TABLE 表名 LIKE 被复制的表名;</p></blockquote></li><li>R（Retrieve)<blockquote><p>查询数据库中所有的表：<br>show tables;<br>查询表结构：<br>DESC 表名;</p></blockquote></li><li>U（Update）：<blockquote><p>修改表名：<br>ALTER TABLE 表名 RENAME TO 新的表名;<br>修改表的字符集：<br>ALTER TABLE 表名 CHARACTER SET 字符集;<br>添加一列：<br>ALTER TABLE 表名 ADD 列名 数据类型;<br>修改列名称，类型：<br>ALTER TABLE 表名 CHANGE 列名 修改的列名 数据类型;<br>ALTER TABLE 表名 MODIFY 列名 数据类型;<br>删除列名：<br>ALTER TABLE 表名 DROP 列名;</p></blockquote></li><li>D（Delete）：<blockquote><p>删除表名：<br>DROP TABLE 表名;<br>判断并删除表名：<br>DROP TABLE IF EXISTS 表名;</p></blockquote><h2 id="DML（增删改表中的数据）"><a href="#DML（增删改表中的数据）" class="headerlink" title="DML（增删改表中的数据）"></a>DML（增删改表中的数据）</h2></li></ul><ol><li>添加数据<blockquote><p>语法：<br>INSERT INTO 表名 (字段1，字段2，…字段n) VALUES(值1，值2，…，值n);</p></blockquote></li><li>删除数据<blockquote><p>语法：<br>DELETE FROM 表民 WHERE [条件] ; –如果不加条件，所有记录都会被删除<br>删除表，再创建一个与这个表一模一样的<br>TRUNCATE TABLE 表名;</p></blockquote></li><li>修改数据<blockquote><p>语法：<br>UPDATE 表名 SET 列名1=值1，列名2=值2，…，列名n=值n WHERE [条件];如果不加条件，所有记录都会被修改</p></blockquote></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2020/03/18/Mysql%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/18/Mysql%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL通用用法："><a href="#SQL通用用法：" class="headerlink" title="SQL通用用法："></a>SQL通用用法：</h2><p>Mysql在cmd中的登录命令：<br>mysql -u用户名 -p<br>退出命令：exit</p><a id="more"></a><p>1、SQL语句可以单行或多行进行书写，以分号结尾<br>2、可使用空格和缩进增强语句的可读性<br>3、MySQL数据库的SQL语句不区分大小写，关键字建议使用大写<br>4、MySQL有三种注释<br>单行注释：<br>–   注释内容<br># 注释内容（符号后面要带有空格）<br>多行注释：/*注释内容*/</p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p>1、DDL（数据定义语言）：用来定义数据库对象：数据库，表，列等。<br>关键字：create，drop，alter等<br>2、DML（数据操作语言）：用来对数据库中的表的数据进行增删改<br>关键字：insert，delete，update等<br>3、DQL（数据查询语言）：用来查询数据库中表的记录（数据）<br>关键字：select，where等<br>4、DCL（数据控制语言）：用来定义数据库的访问权限和安全级别，及创建用户<br>关键字：GRANT，REVOKE</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
